# -*- coding:utf8 -*-

import pickle
import requests

r = requests.get("http://www.pythonchallenge.com/pc/def/banner.p")

hell = pickle.loads(r.text)
for i in hell:
    # print i
    a = ""
    for j in i:
        # 第一次打印出来，是一个数组，数组元素为tuple，
        # 后发现tuple第二个值和都为95, 所以想到应该是打印一个符号组成的文字，
        # 如下打印
        # print j[0] * j[1]
        # 第一次这样打印，每次都会换行，所以打印出来一个不知所然的图案，

        # print j[0] * j[1],
        # 第二次使用“，”结尾避免换行，却出现比较清晰的字母，
        # 但我觉得不应是这么模糊的，后用“-”，替换tuple的第一个元素，
        # 发现，这种打印方式会多打印一个空格,还是老老实实串起来再打印
        a += j[0] * j[1]
    print a

'''
                                                                                               
              #####                                                                      ##### 
               ####                                                                       #### 
               ####                                                                       #### 
               ####                                                                       #### 
               ####                                                                       #### 
               ####                                                                       #### 
               ####                                                                       #### 
               ####                                                                       #### 
      ###      ####   ###         ###       #####   ###    #####   ###          ###       #### 
   ###   ##    #### #######     ##  ###      #### #######   #### #######     ###  ###     #### 
  ###     ###  #####    ####   ###   ####    #####    ####  #####    ####   ###     ###   #### 
 ###           ####     ####   ###    ###    ####     ####  ####     ####  ###      ####  #### 
 ###           ####     ####          ###    ####     ####  ####     ####  ###       ###  #### 
####           ####     ####     ##   ###    ####     ####  ####     #### ####       ###  #### 
####           ####     ####   ##########    ####     ####  ####     #### ##############  #### 
####           ####     ####  ###    ####    ####     ####  ####     #### ####            #### 
####           ####     #### ####     ###    ####     ####  ####     #### ####            #### 
 ###           ####     #### ####     ###    ####     ####  ####     ####  ###            #### 
  ###      ##  ####     ####  ###    ####    ####     ####  ####     ####   ###      ##   #### 
   ###    ##   ####     ####   ###########   ####     ####  ####     ####    ###    ##    #### 
      ###     ######    #####    ##    #### ######    ###########    #####      ###      ######
                                                                                               

'''
